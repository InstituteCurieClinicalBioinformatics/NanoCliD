rule bamCoverage:
    input:
        bam = os.path.join(RES_FOLDER, "backup", "ANALYSIS", config["run"], "BAM", "{mergedSamples}.bam"),
        index = os.path.join(RES_FOLDER, "backup", "ANALYSIS", config["run"], "BAM", "{mergedSamples}.bam.bai")
    output:
        temp(os.path.join(RES_FOLDER, "All", "CNV", "{mergedSamples}.bw"))
    params:
        eff_size = config["cnv"]["effectiveGenomeSize"],
        bin_size = config["cnv"]["binSize"],
        brain_bed_5mb = config["cnv"]["brain_bed_5mb"]
    threads: config["cnv"]["threads"]
    log:
        os.path.join(LOG_PATH, "calling/CNV", "{mergedSamples}_bamCoverage.log")
    container:
        CONTAINERS_PATH + config["cnv"]["deeptoolssif"]
    shell:
        """
        bamCoverage --normalizeUsing RPGC \
              --numberOfProcessors {threads} \
              --bam {input.bam} \
              --outFileName {output} \
              --outFileFormat bigwig  --effectiveGenomeSize {params.eff_size} --binSize {params.bin_size} 2> {log}
        """


rule bam2bigwig:
    input:
        os.path.join(RES_FOLDER, "All", "CNV", "{mergedSamples}.bw")
    output:
        temp(os.path.join(RES_FOLDER, "All", "CNV", "{mergedSamples}.tab"))
    params:
        brain_bed_5mb = os.path.join(config["git_dir"], "annotations", config["cnv"]["brain_bed_5mb"])
    log:
        os.path.join(LOG_PATH, "calling/CNV", "{mergedSamples}_bam2bigwig.log")
    container:
        CONTAINERS_PATH + config["cnv"]["bigwigsif"]
    shell:
        """
        bigWigAverageOverBed {input} {params.brain_bed_5mb} {output} 2> {log}
        """


rule copyNumber:
    input:
        bam = os.path.join(RES_FOLDER, "backup", "ANALYSIS", config["run"], "BAM", "{mergedSamples}.bam"),
        tab = os.path.join(RES_FOLDER, "All", "CNV", "{mergedSamples}.tab")
    output:
        cnv = os.path.join(RES_FOLDER, "backup", "ANALYSIS", "{mergedSamples}", "CNV", "{mergedSamples}_cnv_plot.pdf"),
        seg = temp(os.path.join(RES_FOLDER, "backup", "ANALYSIS", "{mergedSamples}", "CNV", "{mergedSamples}_cnv_plot_segments.txt")),
        ampl = temp(os.path.join(RES_FOLDER, "backup", "ANALYSIS", "{mergedSamples}", "CNV", "{mergedSamples}_amp_plot.pdf")),
        gc = temp(os.path.join(RES_FOLDER, "backup", "ANALYSIS", "{mergedSamples}", "CNV", "{mergedSamples}_gc.pdf")),
        qc1 = temp(os.path.join(RES_FOLDER, "backup", "ANALYSIS", "{mergedSamples}", "CNV", "{mergedSamples}_readlength.pdf")),
        qc2 = temp(os.path.join(RES_FOLDER, "backup", "ANALYSIS", "{mergedSamples}", "CNV", "{mergedSamples}_readlength_summary.txt"))
    params:
        brain_bed = os.path.join(config["git_dir"], "annotations/" + config["cnv"]["brain_bed"]),
        bin_size = config["cnv"]["binSize"],
        genome_subsampling =  os.path.join(config["git_dir"], "annotations/" + config["cnv"]["genome_subsampling"]),
        genome_version = config["genome_version"],
        script = os.path.join(config["git_dir"], 'utils', config["cnv"]["script"]),
        dirname = lambda wildcards, output: os.path.dirname(str(output[0]))
    log:
        os.path.join(LOG_PATH, "calling/CNV", "{mergedSamples}_copyNumber.log")
    container:
        CONTAINERS_PATH + config["R"]["sif"]
    shell:
        """
        Rscript {params.script} {input.tab} \
            {input.bam} \
            {params.dirname} \
            {params.brain_bed} \
            {params.bin_size} \
            {params.genome_subsampling} \
            {params.genome_version} \
            "" \
            {wildcards.mergedSamples} 2> {log}
        """