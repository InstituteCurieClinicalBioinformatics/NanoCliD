import socket
from utils.utils import splitBedForMethylation

hostname = socket.gethostname()

RES_FOLDER_INJECTION = config["output_dir"]
if config["analysis"] == "multipleInjections":
    RES_FOLDER_INJECTION = os.path.join(config["output_dir"], config["run"])

RES_FOLDER = os.path.join(config["output_dir"], config["run"])

LOG_PATH = os.path.join(config["output_dir"], config["run"], "logs/")
CONTAINERS_PATH = workflow.singularity_prefix

if "shbli" in hostname or "node" in hostname:
    LOG_CLUSTER_PATH=os.path.join(config["output_dir"], config["run"], "logs_cluster/")
    os.makedirs(LOG_CLUSTER_PATH, exist_ok=True)

rule samtools_index:
    input:
        bam =  os.path.join(RES_FOLDER_INJECTION, "{injections}", "{samples}", "Mapping", "{samples}.bam")
    output:
        index =  os.path.join(RES_FOLDER_INJECTION, "{injections}", "{samples}", "Mapping", "{samples}.bam.bai")
    log:
        os.path.join(LOG_PATH, "index/samtoolsIndex_{injections}_{samples}.log")
    container:
        CONTAINERS_PATH + config["samtools_sort"]["sif"]
    shell:
        """samtools index {input.bam} {output.index} 2> {log}"""

rule mosdepth:
    input:
        bam =  os.path.join(RES_FOLDER_INJECTION, "{injections}", "{samples}", "Mapping", "{samples}.bam"),
        index =  os.path.join(RES_FOLDER_INJECTION, "{injections}", "{samples}", "Mapping", "{samples}.bam.bai"),
        bed = config["bed"]
    output:
        summary = os.path.join(RES_FOLDER_INJECTION, "{injections}", "{samples}", "QC", "Mosdepth", "OnTarget", "{samples}_ontarget.mosdepth.summary.txt"),
        regions = os.path.join(RES_FOLDER_INJECTION, "{injections}", "{samples}", "QC", "Mosdepth", "OnTarget", "{samples}_ontarget.regions.bed.gz")
    params:
        parameters = config["mosdepth"]["parameters"]
    container:
        CONTAINERS_PATH + config["mosdepth"]["sif"]
    log:
        os.path.join(LOG_PATH, "qc", "{injections}_{samples}_ontarget_mosdepth.log")
    shell:
        """
        if [ $(wc -l {input.bed} | cut -d ' ' -f 1) -ge 1 ]; then
            mosdepth {params.parameters} --by {input.bed} $(dirname {output.summary})/$(echo $(basename {output.summary}) | cut -d '.' -f 1) {input.bam} 2> {log}
        else
            mosdepth {params.parameters} $(dirname {output.summary})/$(echo $(basename {output.summary}) | cut -d '.' -f 1) {input.bam} 2> {log} && touch {output.regions}
        fi
        """

rule samtoolsStats:
    input:
        bam = os.path.join(RES_FOLDER, "backup", "ANALYSIS", config["run"], "BAM", "{mergedSamples}.bam"),
        bed = config["bed"]
    output:
        bam = temp(os.path.join(RES_FOLDER, "backup", "ANALYSIS", config["run"], "BAM", "{mergedSamples}.bam.bamstat"))
    params:
        parameters = config["samtools_stats"]["parameters"]
    log:
        os.path.join(LOG_PATH, "qc/samtoolsStats_{mergedSamples}.log")
    container:
        CONTAINERS_PATH + config["samtools_sort"]["sif"]
    shell:
        """
        if [ $(wc -l {input.bed} | cut -d ' ' -f 1) -ge 1 ]; then
            samtools stats {params.parameters} -t {input.bed} {input.bam} > {output.bam}
        else
            samtools stats {params.parameters} {input.bam} > {output.bam}
        fi
        """

rule computeQC_ontarget:
    input:
        summary = os.path.join(RES_FOLDER, "All", "QC", "Mosdepth", "OnTarget", "{mergedSamples}_ontarget.mosdepth.summary.txt"),
        regions = os.path.join(RES_FOLDER, "All", "QC", "Mosdepth", "OnTarget", "{mergedSamples}_ontarget.regions.bed.gz"),
        bamstat = os.path.join(RES_FOLDER, "backup", "ANALYSIS", config["run"], "BAM", "{mergedSamples}.bam.bamstat"),
        bed = config["bed"]
    output:
        temp(os.path.join(RES_FOLDER, "All", "QC", "{mergedSamples}_qc_ontarget.tsv"))
    params:
        script = os.path.join(config["git_dir"], 'utils', config["computeQC"]["script"]),
        wildcard = lambda wildcards, output: os.path.basename(str(output)).split("_qc")[0]
    log:
        os.path.join(LOG_PATH, "qc", "{mergedSamples}_computeQC_ontarget.log")
    container:
        CONTAINERS_PATH + config["nanocaller"]["sif"]        
    shell:
        """
        if [ $(wc -l {input.bed} | cut -d ' ' -f 1) -ge 1 ]; then
            python3 {params.script} qc -B {input.bamstat} -s {input.summary} -r {input.regions} -w {params.wildcard} -O {output} -b {input.bed} 2> {log}
        else
            python3 {params.script} qc -B {input.bamstat} -s {input.summary} -r {input.regions} -w {params.wildcard} -O {output} 2> {log}
        fi
        """

rule subSampleBam:
    input:
        bam = os.path.join(RES_FOLDER, "backup", "ANALYSIS", config["run"], "BAM", "{mergedSamples}.bam")
    output:
        bam = temp(os.path.join(RES_FOLDER, "All", "Mapping", "{mergedSamples}.ontarget.bam"))
    log:
        os.path.join(LOG_PATH, "merge/onTarget_{mergedSamples}.log")
    params:
        bed = config["bed"]
    container:
        CONTAINERS_PATH + config["bedtools"]["sif"]
    shell:
        """if [[ ! -z {params.bed} ]];
            then
                bedtools intersect -abam {input.bam} -b {params.bed} > {output.bam} 2> {log}
            else
                ln -s {input.bam} {output.bam} 2> {log}
            fi
        """
