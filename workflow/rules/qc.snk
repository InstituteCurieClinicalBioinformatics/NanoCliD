import pandas as pd
import os
import glob

module common:
    snakefile: f"{config['git_dir']}/workflow/rules/common.snk"
    config: config

rule createBedOffTarget:
    input:
        genomeFile = config["genomeFile"]
    output:
        temp(os.path.join(RES_FOLDER, "All", "QC", config['run'] + '_offTarget.bed'))
    params:
        bed = config["bed"]
    log:
        os.path.join(LOG_PATH, "qc/createBedOffTarget.log")
    container:
        CONTAINERS_PATH + config["bedtools"]["sif"]
    shell:
        """
        if [[ ! -z {params.bed} ]];
            then
            bedtools complement -i {params.bed} -g {input.genomeFile} | grep -v chrM > {output} 2> {log}
            else
                touch {output}
        fi
        """

rule createOffTargetBamDir:
    input:
        bam = os.path.join(RES_FOLDER, "backup", "ANALYSIS", config["run"], "BAM", "{mergedSamples}.bam")
    output:
        bam = temp(os.path.join(RES_FOLDER, "All", "Mapping", "OffTarget", "{mergedSamples}.bam"))
    log:
        os.path.join(LOG_PATH, "qc/createOffTargetBamDir_{mergedSamples}.log")
    shell:
        """mkdir -p $(dirname {input.bam}) && ln -s {input.bam} {output.bam} 2> {log}"""

use rule mosdepth from common as mosdepth_offtarget with:
    input:
        bam =  os.path.join(RES_FOLDER_INJECTION, "{injections}", "{samples}", "Mapping", "{samples}.bam"),
        index =  os.path.join(RES_FOLDER_INJECTION, "{injections}", "{samples}", "Mapping", "{samples}.bam.bai"),
        bed = os.path.join(RES_FOLDER, "All", "QC", config['run'] + '_offTarget.bed')
    output:
        summary = temp(os.path.join(RES_FOLDER_INJECTION, "{injections}", "{samples}", "QC", "Mosdepth", "OffTarget", "{samples}_offtarget.mosdepth.summary.txt")),
        regions = temp(os.path.join(RES_FOLDER_INJECTION, "{injections}", "{samples}", "QC", "Mosdepth", "OffTarget", "{samples}_offtarget.regions.bed.gz"))
    params:
        parameters = config["mosdepth"]["parameters"]
    log:
        os.path.join(LOG_PATH, "qc", "{injections}_{samples}_offtarget_mosdepth.log")

use rule mosdepth from common as mosdepth_ontarget_mergedSamples with:
    input:
        bam = os.path.join(RES_FOLDER, "backup", "ANALYSIS", config["run"], "BAM", "{mergedSamples}.bam"),
        index = os.path.join(RES_FOLDER, "backup", "ANALYSIS", config["run"], "BAM", "{mergedSamples}.bam.bai"),
        bed = config["bed"]
    output:
        summary = temp(os.path.join(RES_FOLDER, "All", "QC", "Mosdepth", "OnTarget", "{mergedSamples}_ontarget.mosdepth.summary.txt")),
        regions = temp(os.path.join(RES_FOLDER, "All", "QC", "Mosdepth", "OnTarget", "{mergedSamples}_ontarget.regions.bed.gz"))
    params:
        parameters = config["mosdepth"]["parameters"]
    log:
        os.path.join(LOG_PATH, "qc",  "{mergedSamples}_ontarget_mosdepth.log")

use rule mosdepth from common as mosdepth_offtarget_mergedSamples with:
    input:
        bam = os.path.join(RES_FOLDER, "backup", "ANALYSIS", config["run"], "BAM", "{mergedSamples}.bam"),
        index = os.path.join(RES_FOLDER, "backup", "ANALYSIS", config["run"], "BAM", "{mergedSamples}.bam.bai"),
        bed = os.path.join(RES_FOLDER, 'All', 'QC', config['run'] + '_offTarget.bed')
    output:
        summary = temp(os.path.join(RES_FOLDER, "All", "QC", "Mosdepth", "OffTarget", "{mergedSamples}_offtarget.mosdepth.summary.txt")),
        regions = temp(os.path.join(RES_FOLDER, "All", "QC", "Mosdepth", "OffTarget", "{mergedSamples}_offtarget.regions.bed.gz"))
    params:
        parameters = config["mosdepth"]["parameters"]
    log:
        os.path.join(LOG_PATH, "qc", "{mergedSamples}_offtarget_mosdepth.log")

use rule samtoolsStats from common as samtoolsStats_offtarget with:
    input:
        bam = os.path.join(RES_FOLDER, "backup", "ANALYSIS", config["run"], "BAM", "{mergedSamples}.bam"),
        bed = os.path.join(RES_FOLDER, 'All', 'QC', config['run'] + '_offTarget.bed'),
    output:
        bam = temp(os.path.join(RES_FOLDER, "All", "Mapping", "OffTarget", "{mergedSamples}.bam.bamstat"))
    params:
        parameters = config["samtools_stats"]["parameters"]
    log:
        os.path.join(LOG_PATH, "qc/samtoolsStats_offtarget_{mergedSamples}.log")

use rule computeQC_ontarget from common as computeQC_offtarget with:
    input:
        summary = os.path.join(RES_FOLDER, "All", "QC", "Mosdepth", "OffTarget", "{mergedSamples}_offtarget.mosdepth.summary.txt"),
        regions = os.path.join(RES_FOLDER, "All", "QC", "Mosdepth", "OffTarget", "{mergedSamples}_offtarget.regions.bed.gz"),
        bamstat = os.path.join(RES_FOLDER, "All", "Mapping", "OffTarget", "{mergedSamples}.bam.bamstat"),
        bed = os.path.join(RES_FOLDER, 'All', 'QC', config['run'] + '_offTarget.bed')
    output:
        temp(os.path.join(RES_FOLDER, "All", "QC", "{mergedSamples}_qc_offtarget.tsv"))
    params:
        script = os.path.join(config["git_dir"], 'utils', config["computeQC"]["script"]),
        wildcard = lambda wildcards, output: os.path.basename(str(output)).split("_qc")[0]
    log:
        os.path.join(LOG_PATH, "qc", "{mergedSamples}_computeQC_offtarget.log")

rule concatOffAndOnQC:
    input:
        offtargets = expand(os.path.join(RES_FOLDER, "All", "QC", "{mergedSamples}_qc_offtarget.tsv"), mergedSamples = config["wildcards"]["mergedSamples"]),
        ontargets = expand(os.path.join(RES_FOLDER, "All", "QC", "{mergedSamples}_qc_ontarget.tsv"), mergedSamples = config["wildcards"]["mergedSamples"])
    output:
        os.path.join(RES_FOLDER, "backup", "ANALYSIS", config["run"], "QC", config["run"] + "_qc.tsv")
    params:
        bamFolder = os.path.join(RES_FOLDER, "backup", "ANALYSIS", config["run"], "BAM")
    run:
        files = glob.glob(os.path.join(params.bamFolder, "*.bamstat"))
        for f in files:
            os.remove(f)
        offtarget = pd.DataFrame()
        ontarget = pd.DataFrame()
        for f in input.offtargets:
            df =  pd.read_csv(f, sep = "\t", index_col = 0)
            df.loc["Sample"] = df.columns.tolist()[0]
            offtarget = pd.concat([offtarget, df], axis = 1)
        for f in input.ontargets:
            df =  pd.read_csv(f, sep = "\t", index_col = 0)
            df.loc["Sample"] = df.columns.tolist()[0]
            ontarget = pd.concat([ontarget, df], axis = 1)
        final = pd.concat([offtarget, ontarget], axis = 1, keys = ["OffTarget", "OnTarget"])
        final = final.T
        final.index = [val[0] for val in final.index.tolist()]
        final.to_csv(output[0], sep = "\t")
