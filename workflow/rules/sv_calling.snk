rule cuteSV:
    input:
        bam = os.path.join(RES_FOLDER, "backup", "ANALYSIS", config["run"], "BAM", "{mergedSamples}.bam"),
        index = os.path.join(RES_FOLDER, "backup", "ANALYSIS", config["run"], "BAM", "{mergedSamples}.bam.bai")
    output:
        os.path.join(RES_FOLDER, "backup", "ANALYSIS", "{mergedSamples}", "SV", "{mergedSamples}.cuteSV.vcf")
    params:
        parameters = config["cuteSV"]["parameters"],
        ref = config["genome"], 
        dirname = lambda wildcards, output: os.path.dirname(str(output))
    threads: config["cuteSV"]["threads"]
    log:
        os.path.join(LOG_PATH, "calling/SV", "{mergedSamples}_cuteSV.log")
    container:
        CONTAINERS_PATH + config["cuteSV"]["sif"]
    shell:
        """
        cuteSV {params.parameters} --threads {threads} \
           --sample '{wildcards.mergedSamples}.cuteSV' {input.bam} {params.ref} {output} {params.dirname} 2> {log}
        """

rule nanovar:
    input:
        bam = os.path.join(RES_FOLDER, "backup", "ANALYSIS", config["run"], "BAM", "{mergedSamples}.bam"),
        index = os.path.join(RES_FOLDER, "backup", "ANALYSIS", config["run"], "BAM", "{mergedSamples}.bam.bai")
    output:
        os.path.join(RES_FOLDER, "backup", "ANALYSIS", "{mergedSamples}", "SV", "{mergedSamples}.nanovar.pass.vcf")
    params:
        parameters = config["nanovar"]["parameters"],
        genome_version = config["genome_version"],
        genome = config["genome"],
        dirname = lambda wildcards, output: os.path.dirname(str(output))
    threads: config["nanovar"]["threads"]
    log:
        os.path.join(LOG_PATH, "calling/SV", "{mergedSamples}_nanovar.log")
    container:
        CONTAINERS_PATH + config["nanovar"]["sif"]
    shell:
        """
        nanovar {params.parameters} --threads {threads} \
        --filter_bed {params.genome_version} {input.bam} {params.genome} {params.dirname}/tmp_{rule}_{wildcards.mergedSamples}/ 2> {log}
        mv {params.dirname}/tmp_{rule}_{wildcards.mergedSamples}/$(basename {output}) {output}
        rm -rf {params.dirname}/tmp_{rule}_{wildcards.mergedSamples}
        """

rule sniffles:
    input:
        bam = os.path.join(RES_FOLDER, "backup", "ANALYSIS", config["run"], "BAM", "{mergedSamples}.bam"),
        index = os.path.join(RES_FOLDER, "backup", "ANALYSIS", config["run"], "BAM", "{mergedSamples}.bam.bai")
    output:
        os.path.join(RES_FOLDER, "backup", "ANALYSIS", "{mergedSamples}", "SV", "{mergedSamples}.sniffles.vcf")
    params:
        parameters = config["sniffles"]["parameters"]
    log:
        os.path.join(LOG_PATH, "calling/SV", "{mergedSamples}_sniffles.log")
    container:
        CONTAINERS_PATH + config["sniffles"]["sif"]
    shell:
        """
        sniffles --input {input.bam} --vcf {output} {params.parameters} 2> {log}"""

rule svim:
    input:
        bam = os.path.join(RES_FOLDER, "backup", "ANALYSIS", config["run"], "BAM", "{mergedSamples}.bam"),
        index = os.path.join(RES_FOLDER, "backup", "ANALYSIS", config["run"], "BAM", "{mergedSamples}.bam.bai")
    output:
        os.path.join(RES_FOLDER, "backup", "ANALYSIS", "{mergedSamples}", "SV", "{mergedSamples}.svim.vcf")
    params:
        parameters = config["svim"]["parameters"],
        qual = config["svim"]["qual"],
        genome = config["genome"],
        dirname = lambda wildcards, output: os.path.dirname(str(output))
    log:
        os.path.join(LOG_PATH, "calling/SV", "{mergedSamples}_svim.log")
    container:
        CONTAINERS_PATH + config["svim"]["sif"]
    shell:
        """
        svim alignment --sample '{wildcards.mergedSamples}.svim' {params.parameters} \
            --read_names {params.dirname}/tmp_{rule}_{wildcards.mergedSamples} {input.bam} {params.genome} && \
        bcftools view -i 'QUAL >= {params.qual}' {params.dirname}/tmp_{rule}_{wildcards.mergedSamples}/variants.vcf > {output} 2> {log}
        rm -rf {params.dirname}/tmp_{rule}_{wildcards.mergedSamples}
        """

rule concatSV:
    input:
        os.path.join(RES_FOLDER, "backup", "ANALYSIS", "{mergedSamples}", "SV", "{mergedSamples}.sniffles.vcf"),
        os.path.join(RES_FOLDER, "backup", "ANALYSIS", "{mergedSamples}", "SV", "{mergedSamples}.svim.vcf"),
        os.path.join(RES_FOLDER, "backup", "ANALYSIS", "{mergedSamples}", "SV", "{mergedSamples}.nanovar.pass.vcf"),
        os.path.join(RES_FOLDER, "backup", "ANALYSIS", "{mergedSamples}", "SV", "{mergedSamples}.cuteSV.vcf")
    output:
        temp(os.path.join(RES_FOLDER, "All", "SV", "{mergedSamples}.merged.vcf"))
    params:
        script = os.path.join(config['git_dir'], "utils", config["concatSV"]["script"])
    log:
        os.path.join(LOG_PATH, "calling/SV", "{mergedSamples}_concatSV.log")
    container:
        CONTAINERS_PATH + config["nanocaller"]["sif"]
    shell:
        """
		python3 {params.script} -v {input} -o {output}
        """

rule AnnotSV:
    input:
        os.path.join(RES_FOLDER, "All", "SV", "{mergedSamples}.merged.vcf")
    output:
        temp(os.path.join(RES_FOLDER, "All", "SV", "{mergedSamples}.merged.annotated.tsv"))
    params:
        parameters = config["annotSV"]["parameters"],
        dirname = lambda wildcards, output: os.path.dirname(str(output))
    log:
        os.path.join(LOG_PATH, "calling/SV", "{mergedSamples}_annotSV.log")
    container:
        CONTAINERS_PATH + config["annotSV"]["sif"]
    shell:
        """
        /Annot/AnnotSV/bin/AnnotSV -Svinputfile {input} {params.parameters} -outputDir {params.dirname} 2> {log}
        """

rule makeTableReport:
    input:
        os.path.join(RES_FOLDER, "All", "SV", "{mergedSamples}.merged.annotated.tsv")
    output:
        os.path.join(RES_FOLDER, "backup", "ANALYSIS", "{mergedSamples}", "SV", "{mergedSamples}.annotSV.tsv")
    params:
        script_path = os.path.join(config['git_dir'], "utils/make_annotSVreport.R")
    log:
        os.path.join(LOG_PATH, "calling/SV", "{mergedSamples}_makeTableReport.log")
    container:
        CONTAINERS_PATH + config["R"]["sif"]
    shell:
        """Rscript --vanilla {params.script_path} {input} {output} 2> {log}"""
